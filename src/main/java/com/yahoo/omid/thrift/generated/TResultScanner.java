/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yahoo.omid.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TResultScanner implements org.apache.thrift.TBase<TResultScanner, TResultScanner._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResultScanner");

  private static final org.apache.thrift.protocol.TField SCANNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scannerId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResultScannerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResultScannerTupleSchemeFactory());
  }

  public int scannerId; // required
  public TTransaction transaction; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCANNER_ID((short)1, "scannerId"),
    TRANSACTION((short)2, "transaction");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCANNER_ID
          return SCANNER_ID;
        case 2: // TRANSACTION
          return TRANSACTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCANNERID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCANNER_ID, new org.apache.thrift.meta_data.FieldMetaData("scannerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("transaction", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultScanner.class, metaDataMap);
  }

  public TResultScanner() {
  }

  public TResultScanner(
    int scannerId,
    TTransaction transaction)
  {
    this();
    this.scannerId = scannerId;
    setScannerIdIsSet(true);
    this.transaction = transaction;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResultScanner(TResultScanner other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.scannerId = other.scannerId;
    if (other.isSetTransaction()) {
      this.transaction = new TTransaction(other.transaction);
    }
  }

  public TResultScanner deepCopy() {
    return new TResultScanner(this);
  }

  @Override
  public void clear() {
    setScannerIdIsSet(false);
    this.scannerId = 0;
    this.transaction = null;
  }

  public int getScannerId() {
    return this.scannerId;
  }

  public TResultScanner setScannerId(int scannerId) {
    this.scannerId = scannerId;
    setScannerIdIsSet(true);
    return this;
  }

  public void unsetScannerId() {
    __isset_bit_vector.clear(__SCANNERID_ISSET_ID);
  }

  /** Returns true if field scannerId is set (has been assigned a value) and false otherwise */
  public boolean isSetScannerId() {
    return __isset_bit_vector.get(__SCANNERID_ISSET_ID);
  }

  public void setScannerIdIsSet(boolean value) {
    __isset_bit_vector.set(__SCANNERID_ISSET_ID, value);
  }

  public TTransaction getTransaction() {
    return this.transaction;
  }

  public TResultScanner setTransaction(TTransaction transaction) {
    this.transaction = transaction;
    return this;
  }

  public void unsetTransaction() {
    this.transaction = null;
  }

  /** Returns true if field transaction is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction() {
    return this.transaction != null;
  }

  public void setTransactionIsSet(boolean value) {
    if (!value) {
      this.transaction = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCANNER_ID:
      if (value == null) {
        unsetScannerId();
      } else {
        setScannerId((Integer)value);
      }
      break;

    case TRANSACTION:
      if (value == null) {
        unsetTransaction();
      } else {
        setTransaction((TTransaction)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCANNER_ID:
      return Integer.valueOf(getScannerId());

    case TRANSACTION:
      return getTransaction();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCANNER_ID:
      return isSetScannerId();
    case TRANSACTION:
      return isSetTransaction();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResultScanner)
      return this.equals((TResultScanner)that);
    return false;
  }

  public boolean equals(TResultScanner that) {
    if (that == null)
      return false;

    boolean this_present_scannerId = true;
    boolean that_present_scannerId = true;
    if (this_present_scannerId || that_present_scannerId) {
      if (!(this_present_scannerId && that_present_scannerId))
        return false;
      if (this.scannerId != that.scannerId)
        return false;
    }

    boolean this_present_transaction = true && this.isSetTransaction();
    boolean that_present_transaction = true && that.isSetTransaction();
    if (this_present_transaction || that_present_transaction) {
      if (!(this_present_transaction && that_present_transaction))
        return false;
      if (!this.transaction.equals(that.transaction))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TResultScanner other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TResultScanner typedOther = (TResultScanner)other;

    lastComparison = Boolean.valueOf(isSetScannerId()).compareTo(typedOther.isSetScannerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScannerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scannerId, typedOther.scannerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransaction()).compareTo(typedOther.isSetTransaction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction, typedOther.transaction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResultScanner(");
    boolean first = true;

    sb.append("scannerId:");
    sb.append(this.scannerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transaction:");
    if (this.transaction == null) {
      sb.append("null");
    } else {
      sb.append(this.transaction);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'scannerId' because it's a primitive and you chose the non-beans generator.
    if (transaction == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'transaction' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResultScannerStandardSchemeFactory implements SchemeFactory {
    public TResultScannerStandardScheme getScheme() {
      return new TResultScannerStandardScheme();
    }
  }

  private static class TResultScannerStandardScheme extends StandardScheme<TResultScanner> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResultScanner struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCANNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scannerId = iprot.readI32();
              struct.setScannerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANSACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.transaction = new TTransaction();
              struct.transaction.read(iprot);
              struct.setTransactionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetScannerId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'scannerId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResultScanner struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_ID_FIELD_DESC);
      oprot.writeI32(struct.scannerId);
      oprot.writeFieldEnd();
      if (struct.transaction != null) {
        oprot.writeFieldBegin(TRANSACTION_FIELD_DESC);
        struct.transaction.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResultScannerTupleSchemeFactory implements SchemeFactory {
    public TResultScannerTupleScheme getScheme() {
      return new TResultScannerTupleScheme();
    }
  }

  private static class TResultScannerTupleScheme extends TupleScheme<TResultScanner> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResultScanner struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.scannerId);
      struct.transaction.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResultScanner struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.scannerId = iprot.readI32();
      struct.setScannerIdIsSet(true);
      struct.transaction = new TTransaction();
      struct.transaction.read(iprot);
      struct.setTransactionIsSet(true);
    }
  }

}

